#%RAML 0.8
---
title: API Resource
baseUri: https://localhost/restapi/{version}
version: v1
protocols: [HTTPS]
mediaType: application/json

/sensors:
  description: The sensors delivered a lot of type of measures
  get:
    description: Retrieve a collection of sensors
    responses:
      200:
        body:
           application/json:
             example: |
              [
                {
                  "description":"Sensor nb 1 associated with the organization testGeneratedOrg1",
                  "id":1,
                  "name":"testGeneratedSen1",
                  "orgId":1,
                  "type":"sensorType1",
                  "visible":true
                },
                {
                  "description":"Sensor nb 2 associated with the organization testGeneratedOrg1",
                  "id":2,
                  "name":"testGeneratedSen2",
                  "orgId":1,
                  "type":"sensorType2",
                  "visible":true
                } 
              ]
    queryParameters:
      organizationId:
        displayName: orgId
        type: integer
        description: An organization's id
        example: 109
        required: false      
  post:
    description: Create a sensor
    body:
      application/json:
        example: |
          {
            "description":"Sensor associated with the orgId 251",
            "name":"sensor 1",
            "orgId":30,
            "type":"sensorType",
            "visible":true
          }

    responses:
      201:
        body:
          application/json:
            example: |
              {
                "id": 130,
                "description":"Sensor associated with the orgId 251",
                "name":"sensor 1",
                "orgId":30,
                "type":"sensorType",
                "visible":true
              }

  /{sensorsId}:
    description: The sensor with its ID
    get:
      description: Retrieve a sensor
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "description":"Sensor nb 3 associated with the organization testGeneratedOrg4",
                  "id":12,
                  "name":"testGeneratedSen3",
                  "orgId":4,
                  "type":"sensorType3",
                  "visible":true
                }         
        404:
          description: The sensor was not found.
    put:
      description: Update the sensor's informations
      body:
        application/json:
          example: |
            { 
              "description": "measure outdoor", 
              "id":12,
              "name": "Sensor2", 
              "orgId":4,
              "type": "temperature", 
              "visible" : false,                   
            }           
    delete:
      description: Delete a sensor


/organizations:
  description: The organization which create sensors
  get:
    description: Retrieve a collection of organizations
    responses:
      200:
        body:
          application/json:
            example: |
              [
                {
                  "id": 103,
                  "name":"Organization 5"
                },
                {
                  "id": 104,
                  "name":"Organization 2"
                }
              ]
  post:
    description: Create an organization
    body:
      application/json:
        example: |
          { "name" : "An organization" }
    responses:
      201:
        body:
          application/json:
            example: |
              119
              (the id of the new organization)
  /{organizationsId}:
    description: An organization with its ID
    get:
      description: Retrieve an organization
      responses:
        200:
          body:
            application/json:     
              example: |
                {
                  "id": 112,
                  "name":"first organization"
                }                       
        404:
          description: The organization was not found.
    put:
      description: Update the organization's informations
      body:
        application/json:
          example: |
            { "name":"new name"}
    delete:
      description: Delete an organization

  /{organizationsId}/contact:
    description: An organization's contact
    get:
      description: Retrieve the organization's contact
      responses:
        200:
          body:
            application/json:     
              example: |
                {
                  "email":"user@test.com",
                  "firstName":"Firstnametest",
                  "id":2,
                  "lastName":"Lastnametest2",
                  "mainContact":true,
                  "orgId":1
                }                   
        404:
          description: The organization was not found. 


/users:
  description: |
    The users who interact with the sensors via different interfaces: 
    REST APIs and WEB UIs. Every user belongs to a single observation.
  get:
    description: Retrieve a collection of users
    responses:
      200:
        body:
          application/json:      
            example: |
              [
                {
                  "email":"user@test.com",
                  "firstName":"Firstnametest",
                  "id":1,
                  "lastName":"Lastnametest1",
                  "mainContact":false,
                  "orgId":1
                },
                {
                  "email":"user@test.com",
                  "firstName":"Firstnametest",
                  "id":2,
                  "lastName":"Lastnametest2",
                  "mainContact":true,
                  "orgId":1
                }
              ]
    queryParameters:
      organizationId:
        displayName: ordId
        type: integer
        description: The organization whom belongs the user
        required: false
  post:
    description: Create a collection of users
    body:
      application/json:
        example: |
            {
              "id":2,
              "firstName": "Smith",
              "lastName": "Brown",
              "email": "sb@email.com",
              "password": "pass1",
              "orgId":1
              "mainContact": false
            }
    responses:
      201:
        body:
          application/json:
            example: |
              {
                "id":203,
                "firstName": "Smith",
                "lastName": "Brown",
                "email": "sb@email.com",
                "password": "pass1",
                "orgId":1
                "mainContact": false
              }
  /{usersId}:
    description: An user with its ID
    get:
      description: Retrieve an user
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "id":23,
                  "firstName": "Smith",
                  "lastName": "Brown",
                  "email": "sb@email.com",
                  "password": "pass1",
                  "orgId":1
                  "mainContact": false
                }
        404:
          description: The user was not found.
    put:
      description: Update the user's informations
      body:
        application/json:
          example: |
            {
              "id":2,
              "firstName": "new firstName",
              "lastName": "new lastName",
              "email": "sb@email.com",
              "password": "pass1",
              "orgId":1
              "mainContact": false
            }
    delete:
      description: Delete an user


/observations:
  description: |
    The observation pushed by the sensor, using a (write-only) REST API. 
    An observation reports a sensor value at a given time.
  post:
    description: Create an observation
    body:
      application/json:
        example: |
          {
            "name":"Observation 1",
            "obsValue":25.4,
            "sensorId":3,
            "creationDate": "2014-12-16"
          }
    responses:
      201:
        body:
          application/json:

  /{observationId}:
    description: An observation with its ID
    put:
      description: Update the observation's informations
      queryParameters:
        access_token:
          displayName: Access Token
          type:  string
          description: Token giving you permission to update observation's informations
          required: true
    delete:
      description: Delete an observation

/facts:
  description: |
    The fact represents the values of the sensors observations received. 
    Actually, there are two types : counter and dailyStats.
      
    A "counter" fact counts the number of a sensor's observations received. 
    So for each sensor, there is at mots one "counter" fact.
    
    A "dailyStats" fact counts the number of a sensor's observations received 
    in one day. Also, it calculates the maximum value, the minimum value and 
    the average value of all the observations' value in that day. So, 
    for each sensor and for each day, there is at most one "dailyStats" fact.
  get:
    description: |
      Retrieve a collection of all type of facts

      For more information of a fact (calculated values), you have to do a GET "facts/[type]/{id}"
    responses:
      200:
        body:
          application/json:  
            example: |
              [
                {
                  "id":167,
                  "orgId":1,
                  "type":"counter",
                  "visible":true
                },
                {
                  "id":168,
                  "orgId":1,
                  "type":"dailyStats",
                  "visible":true
                }
              ]
    queryParameters:
      organizationId:
        displayName: orgId
        type: integer
        description: The organizations's id of the fact
        required: false

  /{factsId}:
    description: A fact with its ID
    get:
      description: Retrieve a fact
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "id":172,
                  "orgId":1,
                  "type":"dailyStats",
                  "visible":true
                }
        404:
          description: The fact was not found.

  /counter:
    description: |
      A "counter" fact counts the number of a sensor's observations received. 
      So for each sensor, there is at mots one "counter" fact.
    get:
      description: Retrieve a collection of "counter" facts
      responses:
        200:
          body:
            application/json:
              example: |
                [
                  {
                    "type":"factTiedToSensorDTO",
                    "id":167,
                    "orgId":1,
                    "type":"counter",
                    "visible":true,
                    "sensorId":1,
                    "totNbObs":6
                  },
                  {
                    "type":"factTiedToSensorDTO",
                    "id":171,
                    "orgId":1,
                    "type":"counter",
                    "visible":true,
                    "sensorId":2,
                    "totNbObs":8
                  }
                ]

  /counter/{factsId}:
    description: A "counter" fact with its ID
    get:
      description: Retrieve a "counter" fact with calculated values
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "type":"factTiedToSensorDTO",
                  "id":167,
                  "orgId":1,
                  "type":"counter",
                  "visible":true,
                  "sensorId":1,
                  "totNbObs":6
                }
        404:
          description: The fact was not found.                

  /dailyStats:
    description: |
      A "dailyStats" fact counts the number of a sensor's observations received 
      in one day. Also, it calculates the maximum value, the minimum value and 
      the average value of all the observations' value in that day. So, 
      for each sensor and for each day, there is at most one "dailyStats" fact.
    get:
      description: Retrieve a collection of "dailyStats" facts
      responses:
        200:
          body:
            application/json:
              example: |
                [
                  {
                    "type":"factTiedToDateDTO",
                    "id":168,
                    "orgId":1,
                    "type":"dailyStats",
                    "visible":true,
                    "sensorId":1,
                    "totNbObs":0,
                    "avVal":36.0,
                    "date":"2015-02-10",
                    "maxVal":69.0,
                    "minVal":3.0,
                    "nbVal":6,
                    "sumVal":216.0
                  },
                  {
                    "type":"factTiedToDateDTO",
                    "id":172,
                    "orgId":1,
                    "type":"dailyStats",
                    "visible":true,
                    "sensorId":2,
                    "totNbObs":0,
                    "avVal":57.125,
                    "date":"2015-02-10",
                    "maxVal":85.0,
                    "minVal":13.0,
                    "nbVal":8,
                    "sumVal":457.0
                  }
                ]

  /dailyStats/{factsId}:
    description: A "dailyStats" fact with its ID
    get:
      description: Retrieve a "dailyStats" fact with calculated values
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "type":"factTiedToDateDTO",
                  "id":168,
                  "orgId":1,
                  "type":"dailyStats",
                  "visible":true,
                  "sensorId":1,
                  "totNbObs":0,
                  "avVal":36.0,
                  "date":"2015-02-10",
                  "maxVal":69.0,
                  "minVal":3.0,
                  "nbVal":6,
                  "sumVal":216.0
                }
        404:
          description: The fact was not found.