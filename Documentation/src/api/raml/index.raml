#%RAML 0.8
---
title: API Resource
baseUri: https://localhost/restapi/{version}
version: v1
protocols: [HTTPS]
mediaType: application/json

/sensors:
  description: The sensors delivered a lot of type of measures
  get:
    description: Retrieve a collection of sensors
    responses:
      200:
        body:
           application/json:
             example: |
              [
                { 
                  "description": "measure indoor", 
                  "id" : 1,
                  "name": "Sensor1", 
                  "organization" : 
                  {
                    "id":104,
                    "name":"org1"
                  },
                  "type": "temperature", 
                  "visible" : true,                   
                },
                { 
                  "description": "measure outdoor", 
                  "id" : 2,
                  "name": "Sensor2", 
                  "organization" : 
                  {
                    "id":112,
                    "name":"firstorg"
                  },
                  "type": "temperature", 
                  "visible" : true,                   
                }              
              ]
    queryParameters:
      organizationId:
        displayName: orgId
        type: integer
        description: An organization's id
        example: 109
        required: false      
  post:
    description: Create a sensor
    body:
      application/json:
        example: |
          {
            "description": "Measure indoor",
            "name": "Sensor 3",
            "organization":
            {
              "id": 104,
              "name": "organization 1"
            }
            "type": "temperature",
            "visible": true,
          }
    responses:
      201:
        body:
          application/json:
            example: |
              5
              (the id of the new sensor)

  /{sensorsId}:
    description: The sensor with its ID
    get:
      description: Retrieve a sensor
      responses:
        200:
          body:
            application/json:
              example: |
                { 
                  "description": "measure outdoor", 
                  "id" : 2,
                  "name": "Sensor2", 
                  "organization" : 
                  {
                    "id":112,
                    "name":"first organization"
                  },
                  "type": "temperature", 
                  "visible" : true,                   
                }            
        404:
          description: The sensor was not found.
    put:
      description: Update the sensor's informations
      body:
        application/json:
          example: |
            { 
              "description": "measure outdoor", 
              "name": "Sensor2", 
              "organization" : 
              {
                "id":115,
                "name":"second organization"
              },
              "type": "temperature", 
              "visible" : false,                   
            }           
    delete:
      description: Delete a sensor


/organizations:
  description: The organization which create sensors
  get:
    description: Retrieve a collection of organizations
    responses:
      200:
        body:
          application/json:
            example: |
              [
                {
                  "id": 103,
                  "name":"Organization 5"
                },
                {
                  "id": 104,
                  "name":"Organization 2"
                }
              ]
  post:
    description: Create an organization
    body:
      application/json:
        example: |
          { "name" : "An organization" }
    responses:
      201:
        body:
          application/json:
            example: |
              119
              (the id of the new organization)
  /{organizationsId}:
    description: An organization with its ID
    get:
      description: Retrieve an organization
      responses:
        200:
          body:
            application/json:     
              example: |
                {
                  "id": 112,
                  "name":"first organization"
                }                       
        404:
          description: The organization was not found.
    put:
      description: Update the organization's informations
      body:
        application/json:
          example: |
            { "name":"new name"}
    delete:
      description: Delete an organization


/users:
  description: |
    The users who interact with the sensors via different interfaces: 
    REST APIs and WEB UIs. Every user belongs to a single observation.
  get:
    description: Retrieve a collection of users
    responses:
      200:
        body:
          application/json:      
            example: |
              [
                {                  
                  "id":201,
                  "email":"jw@email.com",
                  "firstName":"John",
                  "lastName":"White",
                  "mainContact":true,
                  "organization":
                  {
                    "id":108,
                    "name":"org5"
                  },
                  "password":"pass1"
                },
                {                  
                  "id":202,
                  "email":"sb@email.com",
                  "firstName":"Smith",
                  "lastName":"Brown",
                  "mainContact":false,
                  "organization":
                  {
                    "id":108,
                    "name":"org5"
                  },
                  "password":"pass1"
                  }
                ]
    queryParameters:
      organizationId:
        displayName: ordId
        type: integer
        description: The organization whom belongs the user
        required: false
  post:
    description: Create a collection of users
    body:
      application/json:
        example: |
            {
              "firstName": "Smith",
              "lastName": "Brown",
              "email": "sb@email.com",
              "password": "pass1",
              "organization": 
              {
                "id": 108,
                "name": "org5"
              },
              "mainContact": false
            }
    responses:
      201:
        body:
          application/json:
            example: |
              203
              (the id of the new user)
  /{usersId}:
    description: An user with its ID
    get:
      description: Retrieve an user
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "firstName": "Smith",
                  "lastName": "Brown",
                  "email": "sb@email.com",
                  "password": "pass1",
                  "organization": 
                  {
                    "id": 108,
                    "name": "org5"
                  },
                  "mainContact": false
                }
        404:
          description: The user was not found.
    put:
      description: Update the user's informations
      body:
        application/json:
          example: |
            {
              "firstName": "new firstName",
              "lastName": "new lastName",
              "email": "sb@email.com",
              "password": "pass1",
              "organization": 
              {
                "id": 108,
                "name": "org5"
              },
              "mainContact": false
            }
    delete:
      description: Delete an user


/observations:
  description: The observation pushed by the sensor, using a (write-only) REST API. An observation reports a sensor value at a given time.
  get:
    description: Retrieve a collection of observations
    responses:
      200:
        body:
          application/json:
            example: |
              [
                {
                  "creationDate":"2014-12-16",
                  "id":251,
                  "name":"Observation 1",
                  "obsValue":25.4,
                  "sensor :
                  {
                    "description":"firstsensor",
                    "id":118,
                    "name":"firstsensor",
                    "organization":
                    {
                      "id":112,
                      "name":"firstorg
                    },
                      "type":"firstsensor",
                      "visible":true
                  }
                },
                {
                  "creationDate":"2014-12-18",
                  "id":254,
                  "name":"Observation 2",
                  "obsValue":23.6,
                  "sensor":
                  {
                    "description":"d1",
                    "id":151,
                    "name":"n1",
                    "organization":
                    {
                      "id":104,
                      "name":"org1"
                    },
                    "type":"t1",
                    "visible":true
                  }
                }
              ]
    queryParameters:
      sensorId:
        displayName: sensorId
        type: integer
        description: The observation's place
        required: false
      date:
        displayName: date
        type: date
        description: The day of creation of the observation
        required: false
  post:
    description: Create an observation
    body:
      application/json:
        example: |
          {
            "name":"Observation 1",
            "obsValue":25.4,
            "sensor":
            {
              "description":"firstsensor",
              "id":118,
              "name":"firstsensor",
              "organization":
                {
                "id":112,
                "name":"firstorg"
                },
              "type":"firstsensor",
              "visible":true
            },
            "creationDate": "2014-12-16"
          }
    responses:
      201:
        body:
          application/json:

    headers:
      Authorization:
        description: |
          A description
          <private>
          Private information
          </private>
  /{observationId}:
    description: An observation with its ID
    get:
      description: Retrieve an observation
      responses:
        200:
          body:
            application/json:
        404:
          description: The observation was not found.
    put:
      description: Update the observation's informations
      queryParameters:
        access_token:
          displayName: Access Token
          type:  string
          description: Token giving you permission to update observation's informations
          required: true
    delete:
      description: Delete an observation

/facts:
  description: The fact
  get:
    description: Retrieve a collection of facts
    responses:
      200:
        body:
          application/json:  
            example: |
              [
                {
                  "id":252,
                  "nbObs":3,
                  "visible":true
                },
                {
                  "id":253,
                  "nbObs":5,
                  "visible":true
                }
              ]
    queryParameters:
      organizationId:
        displayName: orgId
        type: integer
        description: The organizations's id of the fact
        required: false
  /{factsId}:
    description: A fact with its ID
    get:
      description: Retrieve a fact
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "id":256,
                  "nbObs":4,
                  "visible":true
                }
        404:
          description: The fact was not found.
    delete:
      description: Delete a fact